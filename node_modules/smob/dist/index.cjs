'use strict';

exports.PriorityName = void 0;
(function(PriorityName) {
    PriorityName["LEFT"] = 'left';
    PriorityName["RIGHT"] = 'right';
})(exports.PriorityName || (exports.PriorityName = {}));

function isObject(item) {
    return !!item && typeof item === 'object' && !Array.isArray(item);
}
function isSafeKey(key) {
    return key !== '__proto__' && key !== 'prototype' && key !== 'constructor';
}
function isEqual(x, y) {
    if (Object.is(x, y)) return true;
    if (x instanceof Date && y instanceof Date) {
        return x.getTime() === y.getTime();
    }
    if (x instanceof RegExp && y instanceof RegExp) {
        return x.toString() === y.toString();
    }
    if (isObject(x) && isObject(y)) {
        const keysX = Reflect.ownKeys(x);
        const keysY = Reflect.ownKeys(y);
        if (keysX.length !== keysY.length) {
            return false;
        }
        for(let i = 0; i < keysX.length; i++){
            const key = keysX[i];
            if (!Reflect.has(y, key) || !isEqual(x[key], y[key])) {
                return false;
            }
        }
        return true;
    }
    if (Array.isArray(x) && Array.isArray(y)) {
        if (x.length !== y.length) {
            return false;
        }
        for(let i = 0; i < x.length; i++){
            if (!isEqual(x[i], y[i])) {
                return false;
            }
        }
        return true;
    }
    return false;
}

function distinctArray(arr) {
    for(let i = 0; i < arr.length; i++){
        for(let j = arr.length